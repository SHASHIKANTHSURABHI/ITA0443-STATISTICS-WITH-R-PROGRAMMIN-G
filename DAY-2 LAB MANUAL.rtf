{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Calibri;}{\f1\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\widctlpar\sa200\sl276\slmult1\b\f0\fs24 DT:09-02-23                                         \ul LAB-EXCERCISES\par

\pard\widctlpar\fi-851\li851\sa200\sl276\slmult1\tx5954\ulnone                                        \ul ITA0443-STATISTICS WITH R PROGRAMING\par
\ulnone  NAME:S.SHASHIKANTH\par

\pard\widctlpar\sa200\sl276\slmult1\tqc\tx1276\tx5954  REG.NO:192125026\par
GITHUB LINK:https://github.com/SHASHIKANTHSURABHI/ITA0443-STATISTICS-WITH-R-PROGRAMMIN-G\ul\par
\par
\ulnone                                \ul  5.CREATION AND MANIPULATION OF DATAFRAMES IN R\par
\fs22 Exercise 1\par
\ulnone Consider two vectors: x=seq(1,43,along.with=Id)\par
y=seq(-20,0,along.with=Id)\par
Create a data frame \lquote df\rquote  as shown below.\par
&gt;df\par
Id Letter x y\par
1 1 a 1.000000 -20.000000\par
2 1 b 4.818182 -18.181818\par
3 1 c 8.636364 -16.363636\par
4 2 a 12.454545 -14.545455\par
5 2 b 16.272727 -12.727273\par
6 2 c 20.090909 -10.909091\par
7 3 a 23.909091 -9.090909\par
8 3 b 27.727273 -7.272727\par
9 3 c 31.545455 -5.454545\par
10 4 a 35.363636 -3.636364\par
11 4 b 39.181818 -1.818182\par
12 4 c 43.000000 0.000000\par
\ul CODE:\ulnone\par
\b0  x <- seq(1, 43, along.with=Id)\par
y <- seq(-20, 0, along.with=Id)\par
\par
df <- data.frame(Id = rep(1:4, each=3),\par
                 Letter = rep(c("a", "b", "c"), times=4),\par
                 x = x,\par
                 y = y)\par
df\par
\ul\b OUTPUT:\ulnone\par
\b0    Id Letter          x          y\par
1   1     a  1.000000 -20.000000\par
2   1     b  4.818182 -18.181818\par
3   1     c  8.636364 -16.363636\par
4   2     a 12.454545 -14.545455\par
5   2     b 16.272727 -12.727273\par
6   2     c 20.090909 -10.909091\par
7   3     a 23.909091  -9.090909\par
8   3     b 27.727273  -7.272727\par
9   3     c 31.545455  -5.454545\par
10  4     a 35.363636  -3.636364\par
11  4     b 39.181818  -1.818182\par
12  4     c 43.000000   0.000000\par
\par
\ul\b Exercise 2\ulnone\par
Using the data frame \lquote df\rquote  in Exercise1, Construct the following data frame. Id\par
x.ay.ax.by.bx.cy.c 1 1 1.00000 -20.000000 4.818182 -18.181818\par
8.636364 -16.363636 4 2 12.45455 -14.545455 16.272727 -12.727273\par
20.090909 -10.909091 7 3 23.90909 -9.090909 27.727273 -7.272727\par
31.545455 -5.454545 10 4 35.36364 -3.636364 39.181818 -1.818182\par
43.000000 0.000000\par
\ul CODE:\ulnone\par
\b0 df2 <- data.frame(Id = unique(df$Id),\par
                  x.a = df[df$Letter == "a", "x"],\par
                  y.a = df[df$Letter == "a", "y"],\par
                  x.b = df[df$Letter == "b", "x"],\par
                  y.b = df[df$Letter == "b", "y"],\par
                  x.c = df[df$Letter == "c", "x"],\par
                  y.c = df[df$Letter == "c", "y"])\par
df2\b\fs24\par
\ul\fs22 OUTPUT:\ulnone\b0\par
  Id       x.a        y.a       x.b        y.b       x.c        y.c\par
1  1  1.000000 -20.000000  4.818182 -18.181818  8.636364 -16.363636\par
2  2 12.454545 -14.545455 16.272727 -12.727273 20.090909 -10.909091\par
3  3 23.909091  -9.090909 27.727273  -7.272727 31.545455  -5.454545\par
4  4 35.363636  -3.636364 39.181818  -1.818182 43.000000   0.000000\par
\ul\par
\b Exercise 3\b0\par
\ulnone\b Create two data frame df1 and df2:\par
&gt; df1\par
Id Age\par
1 1 14\par
2 2 12\par
3 3 15\par
4 4 10\par
&gt; df2\par
Id Sex Code\par
1 1 F a\par
2 2 M b\par
3 3 M c\par
4 4 F d\par
From df1 and df2 create M:\par
&gt;M\par
Id Age Sex Code\par
1 1 14 F a\par
2 2 12 M b\par
3 3 15 M c 4 4 10 F d\par
\ul CODE\ulnone\par
\b0 > id<-c("11","22","33","44")\par
> age<-c("14","12","15","10")\par
> df1<-data.frame(id,age)\par
> id<-c("11","22","33","44")\par
> sex<-c("F","M","M","F")\par
> code<-c("a","b","c","d")\par
> df2<-data.frame(id,sex,code)\par
> m<-merge(df1,df2,by="id")\par
> print(m)\par
\ul\b OUTPUT:\ulnone\par
 \b0 id age sex code\par
1 11  14   F    a\par
2 22  12   M    b\par
3 33  15   M    c\par
4 44  10   F    d\par
\b\par
\par
\ul Exercise 4\ulnone\par
Create a data frame df3:\par
&gt; df3 id2\par
score 1 4\par
100\par
2 3 98\par
3 2 94\par
4 1 99\par
From M (used in Exercise-3) and df3 create N:\par
Id Age Sex Code score\par
1 1 14 F a 99\par
2 2 12 M b 94\par
3 3 15 M c 98 4 4 10 F d 100\par
\ul CODE:\ulnone\b0\par
df3<-data.frame(id2=c(4,3,2,1),score=c(100,98,94,99))\par
> df3<-data.frame(id2=c(4,3,2,1),score=c(100,98,94,99))\par
> n<-merge(m,df3,by.x="id",by.y="id2")\par
> print(n)\par
\ul\b OUTPUT:\par
\ulnone\b0 Id Age Sex Code score\par
1 1 14 F a 99\par
2 2 12 M b 94\par
3 3 15 M c 98\par
 4 4 10 F d 100\b\par
\ul\par
Exercise 5\par
\ulnone Consider the previous one data frame N:\par
1) Remove the variables Sex and Code\par
2) From N, create a data frame:\par
values ind\par
1 1 Id\par
2 2 Id\par
3 3 Id\par
4 4 Id\par
5 14 Age\par
6 12 Age\par
7 15 Age\par
8 10 Age\par
9 99 score\par
10 94 score\par
11 98 score\par
12 100 score\par
\ul CODE:\ulnone\par
\b0 N_without_sex_code <- N[,c("Id", "Age", "score")\par
values <- c(N_without_sex_code$Id, N_without_sex_code$Age, N_without_sex_code$score) \par
ind <- c(rep("Id", 4), rep("Age", 4), rep("score", 4)) df_values_ind <- data.frame(values, ind)\par
\ul\b OUTPUT:\ulnone\par

\pard\sa200\sl276\slmult1\b0 values ind\par
1 1 Id\par
2 2 Id\par
3 3 Id\par
4 4 Id\par
5 14 Age\par
6 12 Age\par
7 15 Age\par
8 10 Age\par
9 99 score\par
10 94 score\par
11 98 score\par
12 100 score\par
\b\par
\ul Exercise 6\ulnone\par
For this exercise, we\rquote ll use the (built-in) dataset trees.\par
a) Make sure the object is a data frame, if not change it to a data frame.\par
b) Create a new data frame A:\par
&gt;A\par
Girth Height Volume\par
mean_tree 13.24839 76 30.17097\par
min_tree 8.30000 63 10.20000\par
max_tree 20.60000 87 77.00000\par
sum_tree 410.70000 2356 935.30000\par
\ul CODE:\ulnone\b0\par
data("trees")\par
if (!is.data.frame(trees)) \{\par
  trees <- as.data.frame(trees)\par
\}\par
mean_tree <- mean(trees$Girth, na.rm = TRUE)\par
min_tree <- min(trees$Girth, na.rm = TRUE)\par
max_tree <- max(trees$Girth, na.rm = TRUE)\par
sum_tree <- sum(trees$Girth, na.rm = TRUE)\par
A <- data.frame(\par
  Girth = c(mean_tree, min_tree, max_tree, sum_tree),\par
  Height = c(76, 63, 87, 2356),\par
  Volume = c(30.17097, 10.20000, 77.00000, 935.30000),\par
  row.names = c("mean_tree", "min_tree", "max_tree", "sum_tree")\par
)\par
A\par
\ul\b OUTPUT:\ulnone\b0\par
           Girth Height    Volume\par
mean_tree 13.24839     76 30.17097\par
min_tree  8.30000     63 10.20000\par
max_tree 20.60000     87 77.00000\par
sum_tree 410.70000   2356 935.30000\par
\par
\ul\par
\b Exercise 7\par
\ulnone Consider the data frame A:\par
1)Order the entire data frame by the first column.\par
2)Rename the row names as follows: mean, min, max, tree\par
\ul CODE:\ulnone\b0\par
A <- A[order(A[, 1]), ]\par
row.names(A) <- c("min", "mean", "max", "tree")\par
A\par
\ul\b OUTPUT:\ulnone\b0\par
      Girth Height    Volume\par
min  8.30000     63 10.20000\par
mean 13.24839     76 30.17097\par
max  20.60000     87 77.00000\par
tree 410.70000   2356 935.30000\par
\par
\par
\ul\b Exercise 8\par
\ulnone Create an empty data frame with column types:\par
&gt;df\par
IntsLogicals Doubles Characters\par
(or 0-length row.names)\line\ul CODE:\ulnone\b0\par
df <- data.frame(\par
  IntsLogicals = numeric(),\par
  Doubles = numeric(),\par
  Characters = character(),\par
  stringsAsFactors = FALSE\par
)\par
df\par
\ul\b OUTPUT:\ulnone\par
\b0 [1] IntsLogicals Doubles Characters\par
<0 rows> (or 0-length row.names)\par
\par
\ul\b Exercise 9\ulnone\par
Create a data frame XY\par
X=c(1,2,3,1,4,5,2)\par
Y=c(0,3,2,0,5,9,3)\par
&gt; XY\par
X Y\par
1 1 0\par
2 2 3\par
3 3 2\par
4 1 0\par
5 4 5\par
6 5 9\par
7 2 3\par
1) look at duplicated elements using a provided R function.\par
2) keep only the unique lines on XY using a provided R function.\par
\ul CODE:\ulnone\par
\b0 X = c(1, 2, 3, 1, 4, 5, 2)\par
Y = c(0, 3, 2, 0, 5, 9, 3)\par
XY = data.frame(X, Y)\par
duplicated(XY)\par
XY_unique = unique(XY)\par
\ul\b OUTPUT:\ulnone\par
\b0   X Y\par
1 1 0\par
2 2 3\par
3 3 2\par
4 4 5\par
5 5 9\par
\par
\b\par
\ul Exercise 10\ulnone\par
Use the (built-in) dataset Titanic.\par
a) Make sure the object is a data frame, if not change it to a data frame.\par
b) Define a data frame with value 1st in Class variable, and value NO in Survived variable\par
and variables Sex, Age and Freq.\par
Sex Age Freq\par
1 Male Child 0\par
5 Female Child 0\par
9 Male Adult 118\par
13 Female Adult 4\par
\ul CODE:\ulnone\b0\par
if (!is.data.frame(Titanic)) \{\par
  Titanic = as.data.frame(Titanic)\par
\}\par
df = subset(Titanic, Class == "1st" & Survived == "No")\par
df = table(df$Sex, df$Age)\par
df = as.data.frame(df)\par
df = cbind(Sex = row.names(df), Age = rep(c("Child", "Adult"), each = 2), Freq = df[,1])\par
\ul\b OUTPUT:\ulnone\b0\par
   Sex   Age Freq\par
1 Male Child    0\par
2 Female Child    0\par
3   Male Adult 118\par
4 Female Adult   4\par
\b\par
\ul MERGING DATAFRAMES\ulnone\par
\ul Exercise 11 a)\ulnone\par
Create the following dataframes to merge:\par
buildings&lt;- data.frame(location=c(1, 2, 3), name=c(&quot;building1&quot;, &quot;building2&quot;,&quot;building3&quot;))\par
data &lt;-\par
data.frame(survey=c(1,1,1,2,2,2),location=c(1,2,3,2,3,1),efficiency=c(51,64,70,7,80,58))\par
The dataframes, buildingsand datahave a common key variable called, \ldblquote location\rdblquote .\par
Use the merge() function to merge the two dataframes by \ldblquote location\rdblquote , into a new\par
dataframe,\ldblquote buildingStats\rdblquote .\par
\ul CODE:\ulnone\b0\par
buildings <- data.frame(location = c(1, 2, 3), \par
                        name = c("building1", "building2", "building3"))\par
data <- data.frame(survey = c(1,1,1,2,2,2),\par
                   location = c(1,2,3,2,3,1),\par
                   efficiency = c(51,64,70,7,80,58))\par
buildingStats <- merge(buildings, data, by = "location")\\\par
\ul\b OUTPUT:\ulnone\b0\par
  location     name survey efficiency\par
1       1 building1     1       51\par
2       1 building1     2       58\par
3       2 building2     1       64\par
4       2 building2     2        7\par
5       3 building3     1       70\par
6       3 building3     2       80\par
\par
\par
\ul\b Exercise 11 b)\ulnone\par
Give the dataframes different key variable names:\par
buildings&lt;- data.frame(location=c(1, 2, 3), name=c(&quot;building1&quot;,&quot;building2&quot;, &quot;building3&quot;))\par
data &lt;- data.frame(survey=c(1,1,1,2,2,2), LocationID=c(1,2,3,2,3,1),\par
efficiency=c(51,64,70,71,80,58))\par
The dataframes, buildings and data have corresponding variables called, location, and\par
LocationID. Use the merge() function to merge the columns of the two dataframes by the\par
corresponding variables.\par
\ul CODE:\ulnone\b0\par
buildings <- data.frame(location = c(1, 2, 3), \par
                        name = c("building1", "building2", "building3"))\par
data <- data.frame(survey = c(1,1,1,2,2,2),\par
                   LocationID = c(1,2,3,2,3,1),\par
                   efficiency = c(51,64,70,71,80,58))\par
buildingStats <- merge(buildings, data, by.x = "location", by.y = "LocationID")\par
\ul\b OUTPUT:\ulnone\b0\par
  location     name survey efficiency\par
1       1 building1     1       51\par
2       1 building1     2       58\par
3       2 building2     1       64\par
4       2 building2     2       71\par
5       3 building3     1       70\par
6       3 building3     2       80\par
\par
\b\par
\ul DIFFERENT TYPES OF MERGE IN R\ulnone\par
\ul Exercise 12a)InnerJoin:\ulnone\par
The R merge() function automatically joins the frames by common variable names. In that\par
case, demonstrate how you would perform the merge in Exercise 11a without specifying the\par
key variable.\par
\ul CODE:\ulnone\b0\par
buildings <- data.frame(location = c(1, 2, 3), \par
                        name = c("building1", "building2", "building3"))\par
data <- data.frame(survey = c(1,1,1,2,2,2),\par
                   location = c(1,2,3,2,3,1),\par
                   efficiency = c(51,64,70,71,80,58))\par
buildingStats <- merge(buildings, data)\par
\ul\b OUTPUT:\ulnone\b0\par
  location     name survey efficiency\par
1       1 building1     1       51\par
2       1 building1     2       58\par
3       2 building2     1       64\par
4       2 building2     2       71\par
5       3 building3     1       70\par
6       3 building3     2       80\par
\b\par
\ul Exercise 12b)OuterJoin:\ulnone\par
Merge the two dataframes from Exercise 11a. Use the \ldblquote all=\rdblquote  parameter in the merge()\par
function to return all records from both tables. Also, merge with the key variable, \ldblquote location\rdblquote .\par
\ul CODE:\ulnone\b0\par
buildings <- data.frame(location = c(1, 2, 3), \par
                        name = c("building1", "building2", "building3"))\par
data <- data.frame(survey = c(1,1,1,2,2,2),\par
                   location = c(1,2,3,2,3,1),\par
                   efficiency = c(51,64,70,71,80,58))\par
buildingStats <- merge(buildings, data, by = "location", all = TRUE)\par
\ul\b OUTPUT:\ulnone\b0\par
  location     name survey efficiency\par
1       1 building1     1       51\par
2       1 building1     2       58\par
3       2 building2     1       64\par
4       2 building2     2       71\par
5       3 building3     1       70\par
6       3 building3     2       80\par
\b\par
\ul Exercise 12c)Left Join:\ulnone\par
Merge the two dataframes from Exercise 11a, and return all rows from the left table. Specify\par
the matching key from Exercise 11a.\par
\ul CODE:\ulnone\b0\par
buildings <- data.frame(location = c(1, 2, 3), \par
                        name = c("building1", "building2", "building3"))\par
data <- data.frame(survey = c(1,1,1,2,2,2),\par
                   location = c(1,2,3,2,3,1),\par
                   efficiency = c(51,64,70,71,80,58))\par
buildingStats <- merge(buildings, data, by = "location", all.x = TRUE)\b\par
\ul OUTPUT:\ulnone\par
  \b0 location     name survey efficiency\par
1       1 building1     1       51\par
2       1 building1     2       58\par
3       2 building2     1       64\par
4       2 building2     2       71\par
5       3 building3     1       70\par
6       3 building3     2       80\par
\par
\ul\b Exercise 12d)Right Join:\ulnone\par
Merge the two dataframes from Exercise 11a, and return all rows from the right table. Use\par
the matching key from Exercise 11a to return matching rows from the left table.\par
\ul CODE:\ulnone\b0\par
buildings <- data.frame(location = c(1, 2, 3),  name = c("building1", "building2", "building3"))\par
data <- data.frame(survey = c(1,1,1,2,2,2),\par
                   location = c(1,2,3,2,3,1),\par
                   efficiency = c(51,64,70,71,80,58))\par
buildingStats <- merge(buildings, data, by = "location", all.y = TRUE)\par
\ul\b OUTPUT:\ulnone\b0\par
  location     name survey efficiency\par
1       1 building1     1       51\par
2       2 building2     1       64\par
3       2 building2     2       71\par
4       3 building3     1       70\par
5       3 building3     2       80\par
6      NA       NA     2       58\par
7      NA       NA     2       71\par
\b\par
\ul Exercise 12e)Cross Join:\ulnone\par
Merge the two dataframes from Exercise 11a, into a \ldblquote Cross Join\rdblquote  with each row of\par
\ldblquote buildings\rdblquote  matched to each row of \ldblquote data\rdblquote . What new column names are created in\par
\ldblquote buildingStats\rdblquote ?\par
\ul CODE:\ulnone\par
\b0 buildingStats <- merge(buildings, data, by = NULL, all = TRUE)\par
\ul\b OUTPUT:\ulnone\b0\par
The new column names created in buildingStats will be location, name, survey, and efficiency.\par
  location   name survey efficiency\par
1        1 building1      1       51\par
2        1 building1      1       64\par
3        1 building1      1       70\par
4        1 building1      2       71\par
5        1 building1      2       80\par
6        1 building1      2       58\par
7        2 building2      1       51\par
8        2 building2      1       64\par
9        2 building2      1       70\par
10       2 building2      2       71\par
11       2 building2      2       80\par
12       2 building2      2       58\par
13       3 building3      1       51\par
14       3 building3      1       64\par
15       3 building3      1       70\par
16       3 building3      2       71\par
17       3 building3      2       80\par
18       3 building3      2       58\par
\b\par
\ul Exercise 13MergingDataframe rows:\ulnone\par
To join two data frames (datasets) vertically, use the rbind function. The two data frames must\par
have the same variables, but they do not have to be in the same order.\par
Merge the rows of the following two dataframes:\par
buildings&lt;- data.frame(location=c(1, 2, 3), name=c(&quot;building1&quot;,\par
&quot;building2&quot;, &quot;building3&quot;))\par
buildings2 &lt;- data.frame(location=c(5, 4, 6), name=c(&quot;building5&quot;, &quot;building4&quot;, &quot;building6&quot;))\par
Also, specify the new dataframe as, \ldblquote allBuidings\rdblquote .\par
\ul CODE:\ulnone\par
\b0 allBuildings <- rbind(buildings, buildings2)\par
\ul\b OUTPUT:\ulnone\b0\par
allBuildings\par
  location    name\par
1        1 building1\par
2        2 building2\par
3        3 building3\par
4        5 building5\par
5        4 building4\par
6        6 building6\b\par
\par
\ul Exercise 14\ulnone\par
Create a new dataframe, buildings3, that has variables not found in the previous dataframes.\par
buildings3 &lt;- data.frame(location=c(7, 8, 9), name=c(&quot;building7&quot;, &quot;building8&quot;, &quot;building9&quot;),\par
startEfficiency=c(75,87,91))\par
Create a new buildings3 without the extra variables.\par
\ul CODE:\ulnone\par
\b0 buildings3_new <- subset(buildings3, select = c("location", "name"))\par
\ul\b OUTPUT:\ulnone\b0\par
> buildings3_new <- buildings3[, c("location", "name")]\par
> buildings3_new\par
  location     name\par
1        7 building7\par
2        8 building8\par
3        9 building9\b\par
\par
\ul Exercise 15\ulnone\par
Instead of deleting the extra variables from buildings3 . append the buildings, and buildings2\par
with the new variable in buildings3, (from Exercise 14). Set the new data in buildings and\par
buildings2 , (from Exercise 13), to NA\b0 .\par
\ul CODE:\ulnone\b\f1\lang9\par
\b0\f0\lang1033 buildings$startEfficiency <- NA\par
buildings2$startEfficiency <- NA\par
allBuildings <- rbind(buildings, buildings2, buildings3)\par
allBuildings\par
\ul\b OUTPUT:\ulnone\b0\par
  location    name startEfficiency\par
1        1 building1             NA\par
2        2 building2             NA\par
3        3 building3             NA\par
4        5 building5             NA\par
5        4 building4             NA\par
6        6 building6             NA\par
7        7 building7            75\par
8        8 building8            87\par
9        9 building9            91\f1\lang9\par
}
 